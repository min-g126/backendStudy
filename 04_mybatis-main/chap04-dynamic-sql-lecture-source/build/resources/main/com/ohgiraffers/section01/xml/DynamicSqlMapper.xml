<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.DynamicSqlMapper">

    <resultMap id="menuResultMap" type="com.ohgiraffers.common.MenuDTO">
        <id property="code" column="menu_code" />
        <result property="name" column="menu_name" />
        <result property="price" column="menu_price" />
        <result property="categoryCode" column="category_code" />
        <result property="orderableStatus" column="orderable_status" />
    </resultMap>


    <!-- <if> 태그 -->
    <!-- test 속성의 조건에 해당할 때만 엘리먼트 내의 구문을 쿼리에 포함한다. -->
    <select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap">
        SELECT menu_code
               ,menu_name
               ,menu_price
               ,category_code
               ,orderable_status
          FROM tbl_menu
         WHERE orderable_status ='Y'
        <if test="price gte 0 and price lte 10000">
            <![CDATA[
                AND menu_price < #{ price }
            ]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            AND menu_price BETWEEN 10000 AND #{ price }
        </if>
        <if test="price gt 20000 and price lte 30000">
            AND menu_price BETWEEN 20000 AND #{ price }
        </if>
        <if test="price gt 30000">
            AND menu_price BETWEEN 30000 AND #{ price }
        </if>
        ORDER BY menu_code
    </select>

    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT m.menu_code
               ,m.menu_name
               ,m.menu_price
               ,m.category_code
               ,m.orderable_status
          FROM tbl_menu m
        <if test="condition == 'category'">
            JOIN tbl_category c ON (m.category_code = c.category_code)
        </if>
        WHERE m.orderable_status = 'Y'
        <if test="condition == 'menu'">
            AND m.menu_name LIKE CONCAT('%', #{ value },  '%')
        </if>
        <if test="condition == 'category'">
            AND c.category_name = #{ value }
        </if>
        ORDER BY m.menu_code
    </select>


    <!-- <choose> (when, otherwise) -->
    <!-- Java의 switch-case문 처럼 역할을 한다. -->
    <!--
        <choose>
            <when test="(조건)">
                쿼리구문
            </when>
            ...
            <otherwise>
                쿼리구문
            </otherwise>
        </choose>
    -->
    <select id="searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT menu_code
               ,menu_name
               ,menu_price
               ,category_code
               ,orderable_status
          FROM tbl_menu
         WHERE orderable_status = 'Y'
        <choose>
            <when test="value == '식사'">
                AND category_code IN (4, 5, 6, 7)
            </when>
            <when test="value == '음료'">
                AND category_code IN (8, 9, 10)
            </when>
            <otherwise>
                AND category_code IN (11, 12)
            </otherwise>
        </choose>
        ORDER BY menu_code
    </select>


    <!-- <foreach> -->
    <!-- Java의 for문 처럼 역할을 한다. -->
    <!--
        <foreach> 태그의 속성
        1. collection : 반복을 수행할 대상
        2. item : 반복을 수행할 때마다 꺼내올 값의 이름
        3. open : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
        4. separator : 반복을 수행할 떄마다 꺼내온 item 사이에 들어갈 문자
        5. close : <foreach> 엘리먼트 구문의 가장 끝에 올 문자
    -->
    <select id="searchMenuByRandomMenuCode" parameterType="hashmap" resultMap="menuResultMap">
        SELECT menu_code
               ,menu_name
               ,menu_price
               ,category_code
               ,orderable_status
          FROM tbl_menu
         WHERE orderable_status = 'Y'
           AND menu_code IN
        <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator="," close=")">
        <!-- parameter 객체로 받아오지 않고, static 필드 혹은 static 메소드에 직접 접근하여 반환받아 사용 가능
            - static 필드 접근 시 collection 속성 값 : @풀클래스명@필드명
            - static 메소드 접근 시 collection 속성 값 : @풀클래스명@메소드명()
        -->
        <!--
        <foreach collection="@com.ohgiraffers.section01.xml.Application@createRandomMenuCodeList()"
               item="menuCode" open="(" separator="," close=")">
        -->
            #{ menuCode }
        </foreach>
    </select>


    <!-- <where> -->
    <!-- 엘리먼트 구문이 WHERE로 시작하지 않으면 WHERE를 붙여준다.
         또한 where 엘리먼트 내부에 쿼리문이 추가되지 않는 상황인 경우 where를 무시한다.
         단, name 부분에 where를 빼주지 않으면 WHERE WHERE로 where이 2개 생성될 수 있다.
         엘리먼트 구문이 AND나 OR로 시작하면 해당 단어를 지우고 WHERE를 붙여준다. -->
    <select id="searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResultMap">
        SELECT menu_code
               ,menu_name
               ,menu_price
               ,category_code
               ,orderable_status
          FROM tbl_menu
        <if test="condition != null and condition eq 'menuCode'">
            <where>
                menu_code = #{ value }
            </where>
        </if>
    </select>


    <!-- <trim> -->
    <!-- 조회 조건에 AND 혹은 OR로 시작하지 않는 다른 문자로 시작하는 경우 등
         where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해 trim 엘리먼트를 제공한다. -->
    <!--
        <trim> 태그의 속성
        1. prefix : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용
        2. prefixOverrides : 처리 후 엘리먼트 내용의 가장 앞에 해당 속성 값과 일치하는 문자를 자동 삭제
        3. suffix : 처리 후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용
        4. suffixOverrides : 처리 후 엘리먼트 내용의 가장 뒤에 해당 속성 값과 일치하는 문자를 자동 삭제
    -->
    <select id="searchMenuByNameOrCategory" parameterType="hashmap" resultMap="menuResultMap">
        SELECT menu_code
               ,menu_name
               ,menu_price
               ,category_code
               ,orderable_status
          FROM tbl_menu
        <!-- 문제 상황 발생: 카테고리 코드만 가지고 조회하는 경우 WHERE 키워드가 존재하지 않아 쿼리 오류로 조회 불가능하다. -->
        <!--
        <if test="nameValue != null">
            WHERE menu_name LIKE CONCAT('%', #{ nameValue}, '%')
        </if>
        <if test="categoryValue != null">
            AND category_code = #{ categoryValue }
        </if>
        -->

        <!-- 해결방법 1: <where> 태그 이용 -->
        <!--
        <where>
            <if test="nameValue != null">
                menu_name LIKE CONCAT('%', #{ nameValue}, '%')
            </if>
            <if test="categoryValue != null">
                AND category_code = #{ categoryValue }
            </if>
        </where>
        -->

        <!--
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="nameValue != null">
                menu_name LIKE CONCAT('%', #{ nameValue } , '%')
            </if>
            <if test="categoryValue != null">
                AND category_code = #{ categoryValue }
            </if>
        </trim>
        -->

        <!-- (추가) bind -->
        <!-- OGNL 표현식을 이용하여 변수를 만든 후 바인딩하는 역할을 한다.
             _parameter는 파라미터로 전달된 Object를 의미하며, collection이면 get, 객체이면 getter룰 이용한다. -->
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="nameValue != null">
                <bind name="namePattern" value="'%' + _parameter.get('nameValue') + '%'" />
                menu_name LIKE #{ namePattern }
            </if>
            <if test="categoryValue != null">
                AND category_code = #{ categoryValue }
            </if>
        </trim>
    </select>


    <update id="modifyMenu" parameterType="hashmap">
        <!--
        UPDATE tbl_menu
           SET menu_name = #{ name }
               ,menu_price = #{ price }
               ,category_code = #{ categoryCode }
               ,orderable_status = #{ orderableStatus }
         WHERE menu_code = #{ code }
         -->

        <!--
        UPDATE tbl_menu
        <if test="name != null and name != ''">
            SET menu_name = #{ name }
        </if>
        <if test="price != null and price gt 0">
            ,menu_price = # { price }
        </if>
        <if test="categoryCode != null and categoryCode gt 0">
            ,category_code = #{ categoryCode }
        </if>
        <if test="orderableStatus != null and orderableStatus != ''">
            ,orderable_status = #{ orderable_status}
        </if>
        -->

        <!--
        UPDATE tbl_menu
        <set>
            <if test="name != null and name != ''">
                menu_name = #{ name }
            </if>
            <if test="price != null and price gt 0">
                ,menu_price = #{ price }
            </if>
            <if test="categoryCode != null and categoryCode gt 0">
                ,category_code = #{ categoryCode }
            </if>
            <if test="orderableStatus != null and orderableStatus != ''">
                ,orderable_status = #{ orderableStatus }
            </if>
        </set>
        WHERE menu_code = #{ code }
        -->


        UPDATE tbl_menu
        <trim prefix="SET" prefixOverrides=",">
            <if test="name != null and name != ''">
                menu_name = #{ name }
            </if>
            <if test="price != null and price gt 0">
                ,menu_price = #{ price }
            </if>
            <if test="categoryCode != null and categoryCode gt 0">
                ,category_code = #{ categoryCode }
            </if>
            <if test="orderableStatus != null and orderableStatus != ''">
                ,orderable_status = #{ orderableStatus }
            </if>
        </trim>
        WHERE menu_code = #{ code }
    </update>




</mapper>